---
import MainLayout from '../layouts/MainLayout.astro';
import WorkOrderList from '../components/WorkOrderList';
import CreateWorkOrderSlidePanel from '../components/work-order-views/CreateWorkOrderSlidePanel';
import EditWorkOrderSlidePanel from '../components/work-order-views/EditWorkOrderSlidePanel';
import type { UserRole } from '../types/userRole';
import type { WorkOrder } from '../types/workOrders';
// We'll handle authentication in client-side
// This is just a placeholder for SSR
const isAuthenticated = true;
const userRole: UserRole | null = null; // Will be set via client-side script
---

<MainLayout title="Work Orders" isAuthenticated={isAuthenticated} userRole={userRole}>
  <div class="mb-6 flex flex-col sm:flex-row items-center justify-between gap-4">
    <h1 class="text-2xl font-bold text-gray-800 dark:text-white">Work Orders</h1>
    <button
      id="createWorkOrderButton"
      class="inline-flex items-center rounded bg-blue-600 dark:bg-blue-700 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 dark:hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900 transition duration-150 ease-in-out transform hover:scale-105"
    >
      <svg class="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
      </svg>
      Create Work Order
    </button>
  </div>

  <div id="createWorkOrderPanelContainer"></div>
  <div id="editWorkOrderPanelContainer"></div>
  <WorkOrderList client:load type="production_manager" />
</MainLayout>

<script>
  import { localStorageOperations } from '../utils/localStorage';
  import { createRoot } from 'react-dom/client';
  import CreateWorkOrderSlidePanel from '../components/work-order-views/CreateWorkOrderSlidePanel';
  import EditWorkOrderSlidePanel from '../components/work-order-views/EditWorkOrderSlidePanel';
  import React from 'react';
  import type { WorkOrder } from '../types/workOrders';

  // Setup untuk edit panel
  const setupEditPanel = () => {
    const editPanelContainer = document.getElementById('editWorkOrderPanelContainer');
    if (editPanelContainer) {
      let isEditPanelOpen = false;
      let currentWorkOrder: WorkOrder | null = null;
      const editRoot = createRoot(editPanelContainer);

      const renderEditPanel = () => {
        editRoot.render(
          React.createElement(EditWorkOrderSlidePanel, {
            isOpen: isEditPanelOpen,
            workOrder: currentWorkOrder as WorkOrder,
            onClose: () => {
              isEditPanelOpen = false;
              currentWorkOrder = null;
              renderEditPanel();
            },
            onSuccess: () => {
              // Dispatch refresh event
              const refreshEvent = new CustomEvent('refreshWorkOrders');
              document.dispatchEvent(refreshEvent);

              isEditPanelOpen = false;
              currentWorkOrder = null;
              renderEditPanel();
            },
          })
        );
      };

      // Listen untuk event openEditPanel dari TableView
      document.addEventListener('openEditPanel', ((event: CustomEvent) => {
        currentWorkOrder = event.detail.workOrder;
        isEditPanelOpen = true;
        renderEditPanel();
      }) as EventListener);

      // Initial render
      renderEditPanel();
    }
  };

  // Setup untuk create panel
  const setupCreatePanel = () => {
    const createButton = document.getElementById('createWorkOrderButton');
    const panelContainer = document.getElementById('createWorkOrderPanelContainer');

    if (createButton && panelContainer) {
      let isPanelOpen = false;
      const root = createRoot(panelContainer);

      const openPanel = () => {
        isPanelOpen = true;
        renderPanel();
      };

      const closePanel = () => {
        isPanelOpen = false;
        renderPanel();
      };

      const handleSuccess = () => {
        // Dispatch refresh event
        const refreshEvent = new CustomEvent('refreshWorkOrders');
        document.dispatchEvent(refreshEvent);

        isPanelOpen = false;
        renderPanel();
      };

      const renderPanel = () => {
        root.render(
          React.createElement(CreateWorkOrderSlidePanel, {
            isOpen: isPanelOpen,
            onClose: closePanel,
            onSuccess: handleSuccess,
          })
        );
      };

      // Initialize panel in closed state
      renderPanel();

      // Add click event to button
      createButton.addEventListener('click', openPanel);
    }
  };

  // Initialize panels
  setupEditPanel();
  setupCreatePanel();

  // Auth check
  (async function() {
    try {
      const authData = localStorageOperations.getAuth();
      if (!authData?.token || authData.user.role !== 'production_manager') {
        window.location.href = '/login';
      }
      document.body.setAttribute('data-user-role', authData.user.role);
    } catch (error) {
      console.error('Error checking authentication:', error);
      window.location.href = '/login';
    }
  })();
</script>

<style>
  /* Add some animation for the button */
  #createWorkOrderButton {
    position: relative;
    overflow: hidden;
  }

  #createWorkOrderButton::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%, -50%);
    transform-origin: 50% 50%;
  }

  #createWorkOrderButton:focus::after {
    animation: ripple 1s ease-out;
  }

  @keyframes ripple {
    0% {
      transform: scale(0, 0);
      opacity: 0.5;
    }
    100% {
      transform: scale(20, 20);
      opacity: 0;
    }
  }
</style>
